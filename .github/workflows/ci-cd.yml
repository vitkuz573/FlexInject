name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '**.txt'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.txt'

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        dotnet: ['8.0.x', 9.0.x']
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
      
    - name: Setup .NET 8.0 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'
      
    - name: Setup .NET 9.0 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '9.0.x'
      
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-
      
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Run tests
      run: dotnet test --no-build --verbosity normal
      
    - name: Run code quality checks
      run: dotnet build --no-restore -warnaserror

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '9.0.x'
      
    - name: Check if code has changed
      id: check_code_changed
      run: |
        git diff --name-only -- ${{ github.event.before }} ${{ github.sha }} | grep -vE '(\.md$)|(\.txt$)' || true
        if [ $? -eq 1 ]; then
          echo "code_changed=false" >> $GITHUB_ENV
        else
          echo "code_changed=true" >> $GITHUB_ENV
        fi
      
    - name: Bump version and create tag
      id: bump_version
      if: env.code_changed == 'true'
      run: |
        COMMIT_COUNT=$(git rev-list --count HEAD)
        NEW_VERSION="2.0.$COMMIT_COUNT"
        git tag $NEW_VERSION
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      
    - name: Publish to NuGet
      if: env.code_changed == 'true'
      run: |
        dotnet pack ./FlexInject/FlexInject.csproj --configuration Release /p:PackageVersion=${{ env.NEW_VERSION }}
        dotnet nuget push ./FlexInject/bin/Release/*.nupkg --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json
